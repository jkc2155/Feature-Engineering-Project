install.packages("ggplot2")
packs <- installed.packages() # Get the currently installed packages
exc <- names(packs[,’Package’])  # Get the names in a vector
av <- names(available.packages()[,1]) #Get names of available packages in Cran
ins <- av[!av %in% exc] #Make a list of all packages that you havent installed
i
install.packages("lime")
install.packages("googlesheets")
install.packages("bigrquery")
install.packages("jsonlite")
install.packages(c("e1071", "rpart", "igraph", "nnet", "randomForest", "caret", "kernlab", "glmnet", "ROCR", "gbm", "party", "arules", "tree", "klar", "rweka", "ipred", "lars", "earth", "corelearn", "mboost", "bigQueryR", "blscrapeR", "cdlTools", "dataRetrieval", "eechidna", "GetHFData", "googleAnalyticsR", "googleway", "gutenbergr", "ie2miscdata", "macleish", "muckrock", "nasadata", "oec", "osi", "pewdata", "TCGAretriever"))
df4 <- read.csv("Normalized_fff_2014j_Dataset.csv")
# Select all numeric values
source('~/GitHub/Feature-Engineering-Project/Viz Assignment/Missing Values Plot.R')
setwd("~/GitHub/Feature-Engineering-Project/Viz Assignment")
source('~/GitHub/Feature-Engineering-Project/Viz Assignment/Missing Values Plot.R')
plot(ggplot_missing(df1), heatmap(is.na(df1)*1, scale='none'))
par(mfrow=c(2,1))
plot(ggplot_missing(df1), heatmap(is.na(df1)*1, scale='none'))
par(mfrow=c(2,1))
ggplot_missing(df1)
heatmap(is.na(df1)*1, scale='none')
plot(ggplot_missing(df1))
plot(heatmap(is.na(df1)*1, scale='none'))
par(mfrow=c(2,1))
plot(ggplot_missing(df1))
plot(heatmap(is.na(df1)*1, scale='none'))
par(mfrow=c(1,2))
plot(ggplot_missing(df1))
plot(heatmap(is.na(df1)*1, scale='none'))
p1 <- ggplot_missing(df1)
p2 <- heatmap(is.na(df1)*1, scale='none')
multiplot(p1, p2, cols=1)
library(ggplot2)
multiplot(p1, p2, cols=1)
####################################
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p1 <- ggplot_missing(df1)
p2 <- heatmap(is.na(df1)*1, scale='none')
multiplot(p1, p2, cols=1)
multiplot(p1, p2, cols=1)
p2 <- heatmap(is.na(df1)*1, scale='none')
multiplot(p1, p2, cols=1)
multiplot(p1, p2, cols=2)
ggplot_missing(df1)
heatmap(is.na(df1)*1, scale='none')
####################
## Load Libraries ##
####################
library(ggplot2)
library(dplyr)
library(reshape2)
#####################
## Load Data Frame ##
#####################
setwd("~/GitHub/Feature-Engineering-Project/Viz Assignment")
df <- read.csv("Tidy_Data_fff_2014j_Dataset.csv")
############################################
## Check for missing values in data frame ##
############################################
df1 <- subset(df, select = c(TMA, CMA)
df1 <- subset(df, select = c(TMA, CMA))
View(df1)
plot(df1)
df1 <- subset(df, select = c(id_student, TMA, CMA))
plot(df1)
aes(df1$id_student, df1$TMA)
ggplot(aes(df1$id_student, df1$TMA))
ggplot2::aes_auto(df1)
df1 <- subset(df, select = c(x, TMA, CMA))
df1 <- subset(df, select = c(X, TMA, CMA))
plot(df1)
plot(df1$X, df1$TMA)
plot(df1$X, df1$CMA)
scatter.smooth(df1$TMA)
scatter.smooth(df1$TMA, df1$CMA)
View(df)
ggplot(visual1, aes(x,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
ggplot(df1, aes(x,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
tma <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma <- ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
tma_cma <- cma + tma
tma_cma <- tma + geom_point(data=df1, aes(X,CMA)) +
geom_smooth(data=df1, fill="red", colour="red", size=1)
print(tma_cma)
visual1$group <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
df1$group <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
df1$group2 <- ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
visual12 <- rbind(visual1, visual2)
p <- ggplot(visual12, aes(x=ISSUE_DATE, y=COUNTED, group=group, col=group, fill=group)) +
geom_point() +
geom_smooth(size=1)
df1$group <- data.frame(df1$X, df1$TMA)
df1$group2 <- data.frame(df1$X, df1$CMA)
visual12 <- rbind(visual1, visual2)
visual12 <- rbind(df1$group, df1$group2)
df1$group <- data.frame(df1$X, df1$TMA)
df1$group2 <- data.frame(df1$CMA)
visual12 <- rbind(df1$group, df1$group2)
View(df1)
df1 <- subset(df, select = c(X, TMA, CMA))
visual12 <- df1
p <- ggplot(visual12, aes(x=ISSUE_DATE, y=COUNTED, group=group, col=group, fill=group)) +
geom_point() +
geom_smooth(size=1)
p <- ggplot(visual12, aes(x=ISSUE_DATE, y=COUNTED, group=group, col=group, fill=group)) +
geom_point() +
geom_smooth(size=1)
p <- ggplot(visual12, aes(x=X, y=TMA, group=group, col=group, fill=group)) +
geom_point() +
geom_smooth(size=1)
print(p)
print(P)
visual1 = data.frame(df$X,df$TMA)
visual2 = data.frame(df$X,df$CMA)
visuals = rbind(visual1,visual2)
View(visual1)
visual1 = data.frame(X,TMA, data = df)
visual1 = data.frame(X,TMA, data = df)
visual1 = data.frame(c(X,TMA), data = df)
visual1 = data.frame(df$X,df$TMA)
visual2 = data.frame(df$X,df$CMA)
View(visual2)
df1 <- subset(df, select = c(X, TMA, CMA))
tma <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma <- ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
tma
cma
`names<-`(visual1, c(x, score))
visual1 = data.frame(df$X,df$TMA)
colnames(visual1) <- c("X","Score")
visual2 = data.frame(df$X,df$CMA)
colnames(visual2) <- c("X","Score")
visuals = rbind(visual1,visual2)
visuals$vis=c(rep("visual1"),rep("visual2"))
ggplot(visuals, aes(ISSUE_DATE,COUNTED,group=vis,col=vis)) +
geom_point() + geom_smooth()
ggplot(visuals, aes(X,Score,group=vis,col=vis)) +
geom_point() + geom_smooth()
TMA = data.frame(df$X,df$TMA)
colnames(TMA) <- c("X","Score")
CMA = data.frame(df$X,df$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA,CMA)
visuals$vis=c(rep("TMA"),rep("CMA"))
ggplot(visuals, aes(X,Score,group=vis,col=vis)) +
geom_point() + geom_smooth()
ggplot(visuals, aes(X,Score,group=vis,col=Assessment)) +
geom_point() + geom_smooth()
visuals$Assessment =c(rep("TMA"),rep("CMA"))
ggplot(visuals, aes(X,Score,group=vis,col=vis)) +
geom_point() + geom_smooth()
ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) +
geom_point() + geom_smooth()
####################
## Load Libraries ##
####################
library(ggplot2)
library(dplyr)
library(reshape2)
#####################
## Load Data Frame ##
#####################
setwd("~/GitHub/Feature-Engineering-Project/Viz Assignment")
df <- read.csv("Tidy_Data_fff_2014j_Dataset.csv")
##################################################
## Create Data Frame of only CMA and TMA Scores ##
##################################################
df1 <- subset(df, select = c(X, TMA, CMA))
tma_only <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma_only <- ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
###################################################################################
TMA = data.frame(df$X,df$TMA)
colnames(TMA) <- c("X","Score")
CMA = data.frame(df$X,df$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA,CMA)
visuals$Assessment =c(rep("TMA"),rep("CMA"))
ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) +
geom_point() + geom_smooth()
TMA
tma_only
cma_only
cma_and_tma <- ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) +
geom_point() + geom_smooth()
na.omit(df1)
df1 <- subset(df, select = c(X, TMA, CMA))
df1 <- na.omit(df1)
########################################
## Plot average scores on assessments ##
########################################
tma_only <- ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma_only <- ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
########################################
## Plot both assessments on one image ##
########################################
TMA = data.frame(df$X,df$TMA)
colnames(TMA) <- c("X","Score")
CMA = data.frame(df$X,df$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA,CMA)
visuals$Assessment =c(rep("TMA"),rep("CMA"))
cma_and_tma <- ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) +
geom_point() + geom_smooth()
TMA = data.frame(df1$X,df$TMA)
colnames(TMA) <- c("X","Score")
CMA = data.frame(df1$X,df$CMA)
TMA = data.frame(df1$X,df1$TMA)
colnames(TMA) <- c("X","Score")
CMA = data.frame(df1$X,df1$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA,CMA)
visuals$Assessment =c(rep("TMA"),rep("CMA"))
cma_and_tma <- ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) +
geom_point() + geom_smooth()
cma_and_tma
cma_only
cma_and_tma <- ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) + geom_point() + geom_smooth()
cma_and_tma
df3 <- df1
outlierTMA <- function(df3, var) {
TMA <- eval(substitute(var),eval(df3))
na1 <- sum(is.na(TMA))
m1 <- mean(TMA, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(TMA, main="With outliers")
hist(TMA, main="With outliers", xlab=NA, ylab=NA)
mo <- mean(outlier)
outlier <- boxplot.stats(TMA)$out
TMA <- ifelse(TMA %in% outlier, NA, TMA)
boxplot(TMA, main="Without outliers")
hist(TMA, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(TMA))
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(TMA))*100, 1), "n")
cat("Outliers identified:", na2 - na1, "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(TMA, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
df3[as.character(substitute(var))] <- invisible(TMA)
assign(as.character(as.list(match.call())$df3), df3, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(df3))
} else{
cat("Nothing changed", "n")
return(invisible(TMA))
}
}
outlierCMA <- function(df3, var) {
CMA <- eval(substitute(var),eval(df3))
na1 <- sum(is.na(CMA))
m1 <- mean(CMA, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(CMA, main="With outliers")
hist(CMA, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(CMA)$out
mo <- mean(outlier)
CMA <- ifelse(CMA %in% outlier, NA, CMA)
boxplot(CMA, main="Without outliers")
hist(CMA, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(CMA))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(CMA))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(CMA, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
assign(as.character(as.list(match.call())$df3), df3, envir = .GlobalEnv)
df3[as.character(substitute(var))] <- invisible(CMA)
cat("Outliers successfully removed", "n")
return(invisible(df3))
} else{
cat("Nothing changed", "n")
return(invisible(CMA))
}
}
outlierTMA(df3, TMA)
outlierCMA(df3, CMA)
outlierTMA(df3, TMA)
outlierTMA <- function(df3, var) {
TMA <- eval(substitute(var),eval(df3))
m1 <- mean(TMA, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(TMA, main="With outliers")
hist(TMA, main="With outliers", xlab=NA, ylab=NA)
mo <- mean(outlier)
TMA <- ifelse(TMA %in% outlier, NA, TMA)
boxplot(TMA, main="Without outliers")
outlier <- boxplot.stats(TMA)$out
title("Outlier Check", outer=TRUE)
cat("Outliers identified:", na2 - na1, "n")
na2 <- sum(is.na(TMA))
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(TMA))*100, 1), "n")
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
df3[as.character(substitute(var))] <- invisible(TMA)
assign(as.character(as.list(match.call())$df3), df3, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
if(response == "y" | response == "yes"){
} else{
return(invisible(TMA))
cat("Nothing changed", "n")
return(invisible(df3))
}
outlierCMA <- function(df3, var) {
}
na1 <- sum(is.na(TMA))
na1 <- sum(is.na(CMA))
m1 <- mean(CMA, na.rm = T)
hist(TMA, main="Without outliers", xlab=NA, ylab=NA)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
hist(CMA, main="With outliers", xlab=NA, ylab=NA)
boxplot(CMA, main="With outliers")
m2 <- mean(TMA, na.rm = T)
mo <- mean(outlier)
outlier <- boxplot.stats(CMA)$out
CMA <- eval(substitute(var),eval(df3))
CMA <- ifelse(CMA %in% outlier, NA, CMA)
boxplot(CMA, main="Without outliers")
hist(CMA, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(CMA))
cat("Outliers identified:", na2 - na1, "n")
cat("Propotion (%) of outliers:", round((na2 - na1) / sum(!is.na(CMA))*100, 1), "n")
cat("Mean of the outliers:", round(mo, 2), "n")
m2 <- mean(CMA, na.rm = T)
cat("Mean without removing outliers:", round(m1, 2), "n")
cat("Mean if we remove outliers:", round(m2, 2), "n")
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
df3[as.character(substitute(var))] <- invisible(CMA)
assign(as.character(as.list(match.call())$df3), df3, envir = .GlobalEnv)
cat("Outliers successfully removed", "n")
return(invisible(df3))
} else{
cat("Nothing changed", "n")
return(invisible(CMA))
}
}
outlierTMA(df3, TMA)
outlierCMA(df3, CMA)
View(df3)
outlierCMA(df3, CMA)
tma_only_no_outliers <- ggplot(df3, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma_only_no_outliers <- ggplot(df3, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
TMA_outleirs = data.frame(df3$X,df3$TMA)
colnames(TMA) <- c("X","Score")
CMA_outliers = data.frame(df3$X,df3$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA_outleirs,CMA_outliers)
TMA_outleirs = data.frame(df3$X,df3$TMA)
colnames(TMA) <- c("X","Score")
CMA_outliers = data.frame(df3$X,df3$CMA)
colnames(CMA) <- c("X","Score")
visuals = rbind(TMA_outleirs,CMA_outliers)
visuals$Assessment =c(rep("TMA"),rep("CMA"))
visuals = rbind(TMA_outleirs,CMA_outliers)
visuals_outliers = rbind(TMA_outleirs,CMA_outliers)
visuals_outliers = rbind(TMA_outleirs,CMA_outliers)
visuals_outliers$Assessment =c(rep("TMA"),rep("CMA"))
par(mfrow=c(2,2))
ggplot(df3, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
ggplot(df3, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
ggplot(df1, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
ggplot(df1, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=4)
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=2)
outlierCMA(df3, CMA)
########################################
## Plot average scores on assessments ##
########################################
tma_only_no_outliers <- ggplot(df3, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma_only_no_outliers <- ggplot(df3, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
## Plot images to compare outliers and non outliers ##
library(gridExtra)
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=2)
TMA = data.frame(df1$X,df1$TMA)
colnames(TMA) <- c("Student ID","Score")
CMA = data.frame(df1$X,df1$CMA)
colnames(CMA) <- c("Student ID","Score")
visuals = rbind(TMA,CMA)
visuals$Assessment =c(rep("TMA"),rep("CMA"))
cma_and_tma <- ggplot(visuals, aes(X,Score,group=Assessment,col=Assessment)) + geom_point() + geom_smooth()
df2 <- na.omit(df1)
View(df2)
colnames(df2) <- c("Student ID","TMA","CMA")
########################################
## Plot average scores on assessments ##
tma_only <- ggplot(df2, aes("Student ID",TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
cma_only <- ggplot(df2, aes("Student ID",CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=2)
tma_only <- ggplot(df2, aes("Student ID","TMA")) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
tma_only
tma_only <- ggplot(df2, aes(Student_ID,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
tma_only
colnames(df2) <- c("Student_ID","TMA","CMA")
tma_only <- ggplot(df2, aes(Student_ID,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1)
tma_only
cma_only <- ggplot(df2, aes(Student_ID,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1)
cma_only
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=2)
tma_only_no_outliers <- ggplot(df3, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1) + ggtitle("Computer Measured Assessments") + labs(x="Student ID", y="Score")
tma_only_no_outliers
tma_only_no_outliers <- ggplot(df3, aes(X,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1) + ggtitle("Tutor Measured Assessments - No Outliers") + labs(x="Student ID", y="Score")
cma_only_no_outliers <- ggplot(df3, aes(X,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1) + ggtitle("Computer Measured Assessments - No Outliers") + labs(x="Student ID", y="Score")
tma_only <- ggplot(df2, aes(Student_ID,TMA)) + geom_point() + geom_smooth(fill="blue", colour="darkblue", size=1) + ggtitle("Tutor Measured Assessments") + labs(x="Student ID", y="Score")
cma_only <- ggplot(df2, aes(Student_ID,CMA)) + geom_point() + geom_smooth(fill="red", colour="red", size=1) + ggtitle("Computer Measured Assessments") + labs(x="Student ID", y="Score")
grid.arrange(cma_only, cma_only_no_outliers, tma_only, tma_only_no_outliers, ncol=2)
